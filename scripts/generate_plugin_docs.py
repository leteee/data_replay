"""
Plugin Documentation Generator

This script scans the 'modules' directory to find all plugins, extracts metadata
from their Python source code and default YAML configuration, and then generates
a comprehensive Markdown document detailing their usage.
"""

import ast
import importlib
import inspect
from pathlib import Path
import yaml

def get_plugin_info(plugin_py_file: Path, project_root: Path):
    """
    Extracts information about a plugin from its source file and YAML config.

    Args:
        plugin_py_file: Path to the plugin's Python source file.
        project_root: The root directory of the project.

    Returns:
        A dictionary containing the plugin's name, description, and parameters,
        or None if no valid plugin class is found.
    """
    module_path = str(plugin_py_file.relative_to(project_root)).replace('\\', '.').replace('/', '.')[:-3]
    
    with open(plugin_py_file, 'r', encoding='utf-8') as f:
        source = f.read()
        tree = ast.parse(source)

    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef):
            # Check if it inherits from BasePlugin without importing it
            is_plugin = False
            for base in node.bases:
                if isinstance(base, ast.Name) and base.id == 'BasePlugin':
                    is_plugin = True
                    break
            
            if is_plugin:
                class_name = node.name
                docstring = ast.get_docstring(node) or "No description provided."
                
                # --- Parameter Extraction from YAML ---
                yaml_path = plugin_py_file.with_suffix('.yaml')
                params = []
                if yaml_path.exists():
                    with open(yaml_path, 'r', encoding='utf-8') as yf:
                        # Use safe_load to get the data
                        config_data = yaml.safe_load(yf)
                        # Read lines to find comments
                        yf.seek(0)
                        lines = yf.readlines()
                        
                        param_comments = {}
                        for i, line in enumerate(lines):
                            if '#' in line and i > 0:
                                key_line = lines[i-1]
                                key = key_line.split(':')[0].strip()
                                comment = line.split('#', 1)[1].strip()
                                if key:
                                    param_comments[key] = comment

                        if config_data:
                            for key, value in config_data.items():
                                params.append({
                                    "name": key,
                                    "default": value,
                                    "description": param_comments.get(key, "No description.")
                                })

                return {
                    "name": class_name,
                    "description": docstring,
                    "parameters": params,
                    "module_path": module_path
                }
    return None

def generate_docs():
    """
    Finds all plugins, extracts their info, and writes PLUGINS.md.
    """
    project_root = Path(__file__).parent.parent
    modules_dir = project_root / 'modules'
    output_file = project_root / 'PLUGINS.md'

    plugin_files = list(modules_dir.glob('**/*.py'))
    
    all_plugins_info = []
    for py_file in plugin_files:
        if py_file.name in ['__init__.py', 'base_plugin.py', 'datahub.py']:
            continue
        
        info = get_plugin_info(py_file, project_root)
        if info:
            all_plugins_info.append(info)

    # Sort plugins by name for consistent output
    all_plugins_info.sort(key=lambda x: x['name'])

    # --- Generate Markdown ---
    md_content = "# Plugin Reference\n\n"
    md_content += "This document provides a reference for all available plugins in the framework.\n\n"
    md_content += "It is auto-generated by `scripts/generate_plugin_docs.py`. Do not edit it manually.\n\n"
    md_content += "---\n\n"

    for info in all_plugins_info:
        md_content += f"## {info['name']}\n\n"
        md_content += f"**Module:** `{info['module_path']}`\n\n"
        md_content += f"{info['description']}\n\n"
        
        if info['parameters']:
            md_content += "### Parameters\n\n"
            md_content += "| Name | Default Value | Description |\n"
            md_content += "|------|---------------|-------------|\n"
            for param in info['parameters']:
                md_content += f"| `{param['name']}` | `{param['default']}` | {param['description']} |\n"
        else:
            md_content += "This plugin has no configurable parameters.\n"
        
        md_content += "\n---\n\n"

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(md_content)

    print(f"Successfully generated plugin documentation at {output_file}")

if __name__ == "__main__":
    generate_docs()
